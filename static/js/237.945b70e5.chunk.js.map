{"version":3,"file":"static/js/237.945b70e5.chunk.js","mappings":"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","sources":["../node_modules/react-transition-group/esm/CSSTransition.js","component/Detail.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","/* eslint-disable */ // 워닝 에러 미동\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Container, Nav, Button } from 'react-bootstrap';\nimport { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\n\nfunction Detail(props){\n\n\n    let [alert, alertUpd] = useState(true)\n    let [inputData, inputDataUpd] = useState('')\n    let [tab, tabUpd] = useState(0);\n    let [css, cssUpd] = useState(false);\n\n    useEffect(()=>{\n\n      // axios.get();\n\n      // 컴포넌트 MOUNT, UPDATE 될때 실행 (콜백함수 사용)\n      let timer = setTimeout(() => { alertUpd(false) }, 2000);\n      // console.log(\"hello\")\n      return (() => { clearTimeout(timer) });\n\n    }, []);\n\n    let navigate = useNavigate();\n    let {id} = useParams();\n    let findProd = props.shoes.find(function(product){\n      return product.id == id\n    });\n    \n    return (\n      <div className=\"container\">\n\n            {/* <input onChange={(e)=>{ inputDataUpd(e.target.value) }}/> */}\n\n            {\n              alert === true\n              ? <div className='my_alert'>\n                  <p>재고가 얼마 남지 않았습니다.</p>\n                </div>\n              : null\n\n            }\n            \n            \n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <img src={ 'https://codingapple1.github.io/shop/shoes' + (findProd.id) + '.jpg' } width=\"100%\" />\n              </div>\n              <div className=\"col-md-6 mt-4\">\n                <h4 className=\"pt-5\">{findProd.title}</h4>\n                <p>{findProd.content}</p>\n                <p>{findProd.price}원</p>\n\n                <StokeInfo stoke={props.stoke}></StokeInfo>\n                <p></p>\n                <button className=\"btn btn-danger\" onClick={ ()=> {\n                      \n                      props.stokeUpd([9, 11, 12]);\n                      props.dispatch({ type : 'quanAdd', data : { id:findProd.id, name: findProd.title, quan:1 } });\n                      navigate('/cart');\n\n                } }>주문하기</button> \n                &nbsp;\n                <button className=\"btn btn-danger\" onClick={ ()=> {\n                    // history.goBack();\n                    navigate('/');\n                } }> Back </button> \n              </div>\n            </div>\n\n            <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\n              <Nav.Item>\n                <Nav.Link eventKey=\"link-0\" onClick={()=>{ cssUpd(false); tabUpd(0) }}> Option 1</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"link-1\" onClick={()=>{ cssUpd(false); tabUpd(1) }}> Option 2</Nav.Link>\n              </Nav.Item>\n            </Nav>\n\n            <CSSTransition in={css} classNames=\"wow\" timeout={500}>\n              <TabContent tab={tab} cssUpd={cssUpd}/>\n            </CSSTransition>\n\n        </div> \n    )\n  }\n\n  function TabContent(props){\n\n    useEffect(()=>{\n      props.cssUpd(true);\n    });\n\n    if (props.tab == 0) {\n      return  <div>0번째 내용입니다.</div>\n    }\n    else if (props.tab == 1) {\n      return <div>1번째 내용입니다.</div>\n    }\n    else {\n      return <div>2번째 내용입니다.</div>\n    }\n\n}\n\nfunction StokeInfo(props){\n  return (\n    <p>재고 : { props.stoke[0] }</p>\n  )\n}\n\nfunction detailState(state){\n\n    return {\n        state : state.reducer,\n        alertOpen : state.reducer2\n    }\n}\n\nexport default connect(detailState)(Detail)"],"names":["removeClass","node","classes","split","forEach","c","removeOneClass","CSSTransition","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","appliedClasses","appear","enter","exit","onEnter","maybeNode","maybeAppearing","_this$resolveArgument","resolveArguments","appearing","removeClasses","addClass","props","onEntering","_this$resolveArgument2","type","onEntered","_this$resolveArgument3","onExit","onExiting","onExited","nodeRef","current","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","_inheritsLoose","_proto","prototype","phase","className","scrollTop","addOneClass","_addClass","_this$appliedClasses$","base","active","done","render","_this$props","_objectWithoutPropertiesLoose","React","Transition","_extends","defaultProps","propTypes","TabContent","useEffect","cssUpd","tab","StokeInfo","stoke","connect","state","reducer","alertOpen","reducer2","useState","alert","alertUpd","tabUpd","css","timer","setTimeout","clearTimeout","navigate","useNavigate","id","useParams","findProd","shoes","find","product","src","width","title","content","price","onClick","stokeUpd","dispatch","data","name","quan","Nav","variant","defaultActiveKey","eventKey","in","timeout"],"sourceRoot":""}